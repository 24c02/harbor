<div class="scrapyard-leaderboard">
  <h1>Scrapyard Leaderboard</h1>

  <div class="sort-controls">
    Sort by:
    <%= link_to "Total Time", scrapyard_leaderboards_path(sort: 'total'), 
        class: "sort-link #{@sort_by == 'total' ? 'active' : ''}" %>
    |
    <%= link_to "Average Time", scrapyard_leaderboards_path(sort: 'average'), 
        class: "sort-link #{@sort_by == 'average' ? 'active' : ''}" %>
  </div>

  <em>Use the "ðŸ“Œ" button to pin an event.</em>

  <% @event_stats.each_with_index do |stats, index| %>
    <div class="event-card" id="event-<%= stats[:event].id %>">
      <a href="#<%= stats[:event].id %>" class="pin-link" title="Copy link to this event">ðŸ“Œ</a>
      <h2>
        <%= link_to scrapyard_leaderboard_path(stats[:event]) do %>
          <% case index %>
          <% when 0 %>
            ðŸ¥‡
          <% when 1 %>
            ðŸ¥ˆ
          <% when 2 %>
            ðŸ¥‰
          <% else %>
            <span class="ordinal"><%= (index + 1).ordinalize %></span>
          <% end %>
          <%= stats[:event].name %>
        <% end %>
      </h2>
      <div class="stats">
        <div class="stat">
          <label>Coding time</label>
          <span>
            <% if stats[:total_seconds] > 0 %>
              <span class="<%= @sort_by == 'total' ? 'active-sort' : '' %>">
                <%= short_time_detailed(stats[:total_seconds]) %>
              </span>
              <span class="average <%= @sort_by == 'average' ? 'active-sort' : '' %>">
                (<%= short_time_detailed(stats[:average_seconds_per_attendee]) %> avg)
              </span>
            <% else %>
              <span class="no-time">No time logged</span>
            <% end %>
          </span>
        </div>
        <div class="stat">
          <label>Hackatime users / Estimated attendees</label>
          <span>
            <%= stats[:hackatime_users] %>/<%= stats[:total_attendees] %>
            <% percent = (stats[:hackatime_users].to_f / stats[:total_attendees] * 100) %>
            (<%= percent < 1 ? "%.1f" % percent : percent.to_i %>%)
          </span>
        </div>
      </div>
    </div>
  <% end %>
</div>

<% content_for :head do %>
  <style>
    .scrapyard-leaderboard {
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
    }

    .scrapyard-leaderboard h1 {
      margin-top: 0;
    }

    .sort-controls {
      margin-bottom: 20px;
      text-align: left;
    }

    .sort-link {
      color: inherit;
      text-decoration: none;
      opacity: 0.7;
      transition: opacity 0.2s;
      padding: 4px 8px;
    }

    .sort-link:hover {
      opacity: 1;
    }

    .sort-link.active {
      opacity: 1;
      font-weight: bold;
    }

    .event-card {
      background: var(--uchu-light-green);
      border-radius: 8px;
      padding: 20px;
      margin-bottom: 20px;
      position: relative;
      transition: all 0.3s;
      border: 2px solid transparent;
    }

    .event-card.highlighted {
      border: 2px solid #FFE066;
      background: #f4f9f4;
      box-shadow: 0 0 10px rgba(255, 224, 102, 0.3);
    }

    .pin-link {
      position: absolute;
      top: 12px;
      right: 12px;
      text-decoration: none;
      opacity: 0.5;
      transition: opacity 0.2s;
    }

    .pin-link:hover {
      opacity: 1;
    }

    .event-card h2 {
      margin: 0 0 15px 0;
    }

    .event-card h2 a {
      color: inherit;
      text-decoration: none;
    }

    .event-card h2 a:hover {
      text-decoration: underline;
    }

    .ordinal {
      font-size: 0.9em;
      opacity: 0.7;
      font-weight: normal;
    }

    .stats {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 15px;
    }

    .stat {
      display: flex;
      flex-direction: column;
    }

    .stat label {
      font-size: 0.9em;
      opacity: 0.8;
    }

    .stat span {
      font-size: 1.2em;
      font-weight: bold;
    }

    .stat .average {
      font-size: 0.9em;
      opacity: 0.8;
      font-weight: normal;
      margin-left: 4px;
    }

    .stat .no-time {
      opacity: 0.7;
      font-weight: normal;
    }

    .active-sort {
      font-weight: bold !important;
      opacity: 1 !important;
    }
  </style>

  <script>
    function handlePin() {
      console.log("Handling pin");
      const pinId = window.location.hash.substring(1);
      
      if (pinId) {
        const targetCard = document.getElementById('event-' + pinId);
        if (targetCard) {
          // Remove any existing highlights
          document.querySelectorAll('.event-card.highlighted').forEach(card => {
            card.classList.remove('highlighted');
          });
          
          targetCard.classList.add('highlighted');
          // Center the card
          const windowHeight = window.innerHeight;
          const cardHeight = targetCard.offsetHeight;
          const cardTop = targetCard.offsetTop;
          const scrollTo = cardTop - (windowHeight - cardHeight) / 2;
          window.scrollTo({ top: scrollTo });
        }
      }
    }

    // Add click handlers to pin links
    document.addEventListener('turbo:load', function() {
      document.querySelectorAll('.pin-link').forEach(link => {
        link.addEventListener('click', function(e) {
          e.preventDefault();
          const hash = this.getAttribute('href');
          window.location.hash = hash;
          handlePin();
          window.location.reload();
        });
      });
    });

    // Handle both initial page load and subsequent Turbo navigations
    document.addEventListener('turbo:load', handlePin);
    document.addEventListener('turbo:render', handlePin);
    document.addEventListener('DOMContentLoaded', handlePin);
    window.addEventListener('hashchange', handlePin);

    // Set up auto-refresh if we have a pin
    document.addEventListener('turbo:load', function() {
      if (window.location.hash) {
        // Clear any existing refresh interval
        if (window.refreshInterval) {
          clearInterval(window.refreshInterval);
        }
        
        // Set up new refresh using Turbo
        window.refreshInterval = setInterval(() => {
          Turbo.visit(window.location.href, { action: 'replace' });
        }, 5000);
      }
    });

    // Clean up interval when leaving the page
    document.addEventListener('turbo:before-visit', function() {
      if (window.refreshInterval) {
        clearInterval(window.refreshInterval);
      }
    });
  </script>
<% end %> 